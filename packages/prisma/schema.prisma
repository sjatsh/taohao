generator client {
  provider        = "prisma-client-js"
  relationMode    = "prisma"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
}

model products {
  id           Int      @id @default(autoincrement())
  title        String   @unique @db.VarChar(255)
  num          Int
  price        Float
  origin_price Float?
  image        String   @db.VarChar(255) @default("")
  content      String   @db.Text
  pay_type     String   @db.VarChar(255) @default("")
  kami         String   @db.Text
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  keywords     String   @db.Text @default("[]")
  orders       orders[]
}

model orders {
  id         Int      @id @default(autoincrement())
  order_id   String   @unique @db.VarChar(255)
  product    products @relation(fields: [product_id], references: [id])
  product_id Int
  num        Int
  price      Float    @default(0)
  email      String   @db.VarChar(255)
  payment    String   @default("") @db.VarChar(255)
  status     Int      @default(0)
  kami       String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([order_id, email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
